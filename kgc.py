from util.ecc import *
from random import randint
from util.hash import gen_hash

class Kgc:
    H_0 = ""
    H_1 = ""
    q: int


    def setup(self):
        # Using the secp256k1 elliptic curve equation: yˆ2 = xˆ3 + 7
        # Prime of the finite field
        # Necessary parameters for the cryptographic operations
        P: int = (
            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F
        )

        field = PrimeGaloisField(prime=P)

        A: int = 0
        B: int = 7

        curve256k1 = EllipticCurve(
            a=A,
            b=B,
            field=field
        )   

        I = ECCPoint(x = None, y = None, curve = curve256k1)

        # Generator point of the chosen group
        G = ECCPoint(
            x = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798,
            y = 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8,
            curve = curve256k1
        )

        # Order of the group generated by G, such that nG = I
        self.q = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141

        x_master = randint(0, self.q)   # random KGC master key
        P_pub = x_master * G            # scalar multiplication, public key

        self.H_0 = gen_hash
        self.H_1 = ""

        return (G, P_pub, P, self.H_0, self.H_1, x_master)


    def gen_partial_key(self, d_i, P_i, x_master):
        r_i = randint(0, self.q)
        R_i = r_i * G
        s_i = r_i + x_master * self.H_0(d_i, R_i, P_i) % self.q

        return (R_i, s_i)
